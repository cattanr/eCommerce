<?php

namespace StoreBundle\Repository;

use Doctrine\ORM\Query\Expr\Join;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function countPage()
    {
        $queryBuilder = $this
        ->createQueryBuilder('a')
        ->select('COUNT(a)');

        return $queryBuilder
        ->getQuery()
        ->getSingleScalarResult();
    }

    public function findByPage($limit, $offset)
    {
        $queryBuilder = $this
        ->createQueryBuilder('a');

        return $queryBuilder
        ->setFirstResult($limit)
        ->setMaxResults($offset)
        ->getQuery()
        ->getResult();
    }

    public function getArticleAlert()
    {
        $queryBuilder = $this->createQueryBuilder('a')
                             ->where(' a.stock > 10 and a.stock < 25 ');
        return $queryBuilder
        ->getQuery()
        ->getResult();
    }
    public function getArticleDanger()
    {
        $queryBuilder = $this->createQueryBuilder('a')
                             ->where('a.stock < 10');
        return $queryBuilder
        ->getQuery()
        ->getResult();
    }

    public function sortBy($type, $gender, $category)
    {
        if($category == null){
            $queryBuilder = $this->createQueryBuilder('a')
                                ->select('a, c')
                                ->innerJoin('a.category', 'c') 
                                ->where('c.gender = :gender')
                                ->orderBy('a.salePrice', $type)
                                ->setParameters(['gender'=> $gender]); 
        }
        else{
            $queryBuilder = $this->createQueryBuilder('a')
                                ->select('a, c')
                                ->innerJoin('a.category', 'c') 
                                ->where('c.gender = :gender')
                                ->andWhere('c.name = :name')
                                ->orderBy('a.salePrice', $type)
                                ->setParameters(['gender'=> $gender, 'name' => $category]); 
        }
        return $queryBuilder
        ->getQuery()
        ->getResult();

    }
}
